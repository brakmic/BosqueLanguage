//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------

namespace NSTest;

entrypoint function sizeAndEmpty(): Int {
    check Map<Int, Int>@{}.size() == 0;
    check Map<Int, Int>@{1 => 1, 2 => 2}.size() == 2;

    check Map<Int, Int>@{}.empty();

    return 0;
}

entrypoint function hasop(): Int {
    let m = Map<Int, Int>@{1 => 1, 2 => 2};
    let me = Map<Int, Int>@{};

    check m.has(1);
    check !me.has(1);

    check !m.has(11);

    return 0;
}

entrypoint function hasallop(): Int {
    let m = Map<Int, Int>@{1 => 1, 2 => 2};
    let me = Map<Int, Int>@{};

    check m.hasAll(1);
    check m.hasAll(1, 2);
    check me.hasAll();

    check !me.hasAll(1);
    check !m.hasAll(1, 2, 3);
    check !m.hasAll(1, 3);

    return 0;
}

entrypoint function domainsubsetofop(): Int {
    let m = Map<Int, Int>@{1 => 1, 2 => 2};
    let me = Map<Int, Int>@{};

    check m.domainSubsetOf(Set<Int>@{1});
    check m.domainSubsetOf(Set<Int>@{1, 2});
    check me.domainSubsetOf(Set<Int>@{});

    check !me.domainSubsetOf(Set<Int>@{1});
    check !m.domainSubsetOf(Set<Int>@{1, 2, 3});
    check !m.domainSubsetOf(Set<Int>@{1, 3});

    return 0;
}

entrypoint function gettests(): Int {
    let m = Map<Int, Int>@{1 => 1, 2 => 2};
    let me = Map<Int, Int>@{};

    check m.get(1) == 1;
    check m.tryGet(2) == 2;
    check m.defaultGet(2, 0) == 2;

    check me.tryGet(2) == none;
    check me.defaultGet(2, 0) == 0; 

    check m.tryGet(5) == none;
    check m.defaultGet(5, 0) == 0; 

    return 0;
}

entrypoint function geterr1(): Int {
    let me = Map<Int, Int>@{};

    return me.get(1);
}

entrypoint function geterr2(): Int {
    let m = Map<Int, Int>@{1 => 1, 2 => 2};

    return m.get(5);
}

entrypoint function submapop(): Int {
    let m = Map<Int, Int>@{1 => 1, 2 => 2, 3 => 3};

    let ms = m.submap(fn(k, v) => k > 1);
    check ms.size() == 2;
    check ms.get(2) == 2;
    check ms.get(3) == 3;

    return 0;
}

entrypoint function oftypeop(): Int {
    let m = Map<Int, Int?>@{1 => 1 typeas Int?, 2 => 2 typeas Int?, 3 => none typeas Int?};

    let mc = m.ofType<Int, Int>();
    check mc.size() == 2;
    check mc.get(2) == 2;

    return 0;
}

entrypoint function castop(): Int {
    let m = Map<Int, Int?>@{1 => 1 typeas Int?, 2 => 2 typeas Int?};

    let mc = m.cast<Int, Int>();
    check mc.size() == 2;
    check mc.get(2) == 2;

    return 0;
}

entrypoint function casterr(): Int {
    let m = Map<Int, Int?>@{1 => 1 typeas Int?, 2 => 2 typeas Int?, 3 => none typeas Int?};

    return m.cast<Int, Int>().size();
}
